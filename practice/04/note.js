// 반복문

/*
배열 : 여러 개의 변수를 한번에 선언해 다를 수 있는 자료형, 대괄호[...] 사용해 생성, 일반적으로 복수형으로 이름 지음
  - 요소 : 배열 내부에 들어있는 값 ; [요소, 요소, ..., 요소]
  - 인덱스 : 요소의 순서 ; 배열[인덱스]
  - length 속성: 배열 내부의 요소 개수 확인할 때 사용 ; 배열.length
  - 배열 뒷부분에 요소 추가할 때 
    1) push() 메소드 사용 ; 배열.push(요소)
    2) 인덱스 사용 ; 배열[인덱스] = 요소 -> 배열 길이는 고정이 아니므로 배열.length보다 큰 인덱스에 추가시 그 사이 인덱스는 empty 됨
  - 배열 요소 제거하기  
    1) 인덱스 기반 : splice() 메소드 사용 ; 배열.splice(인덱스, 제거할 요소의 개수)
    2) 값 기반 : 배열 내부에서 특정 값 위치 찾는 indexOf() 메소드 사용해 위치 추출 후 splice() 사용 ; 배열.splice(배열.indexOf(요소), 제거할 요소 개수)
    // indexOf() : 배열 내부에 요소 있을 경우 인덱스 리턴, 요소 없을 때 -1 리턴, 문자열 내부에서도 특정 문자열 위치 찾을 수 있음 
  - 배열 내부에서 특정 값 가진 요소 모두 제거 : filter() 메소드 사용 
  - 배열의 특정 위치에 요소 추가 : splice()메소드의 두번째 매개변수에 0 입력하면 제거X, 3번째 매개변수에 추가하고 싶은 요소 입력 ; 배열.splice(인덱스, 0, 요소)

for in 반복문 : 배열 요소를 하나하나 꺼내서 특정 문장 실행할 때 사용
  - 기본형태 : 
    for (const 반복변수 in 배열 또는 객체){  // 반복변수에 요소의 인덱스들 들어감
        문장
    }

for of 반복문 : 요소의 값 반복할 때 안정적으로 사용 가능
  - 기본형태 : 
  for (const 반복변수 of 배열 또는 객체){  // 반복변수에 요소의 값이 들어감
    문장
  }

for 반복문 : 특정 횟수만큼 반복하고 싶을 때 사용하는 범용적 반복문
  - 기본형태 : 
  for (let i = 0; i < 반복 횟수; i++){
    문장
  }

while 반복문 : if 조건문과 형태 유사, 불 표현식이 true면 계속해서 문장 실행, 조건에 큰 비중이 있을 때 사용, 조건을 거짓으로 만들 수 있는 내용이 문장에 포함돼 있지 않으면 무한루프 됨
  - 기본형태 :
  while (불 표현식){
    문장
  }

키워드
  - break : switch 조건문이나 반복문 벗어날 때 사용 
  - continue : 반복문 안의 반복 작업을 멈추고 반복문의 처음으로 돌아가 다음 반복 작업 진행

*/

// 참고내용
/*
자료의 비파괴와 파괴
  - 비파괴적 처리 : 처리 후 원본 내용 변경 X
  - 파괴적 처리 : 처리 후 원본 내용 변경 O
*/
