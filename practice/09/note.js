// 클래스

/*
추상화 : 프로그램에 필요한 요소만 사용해서 객체 표현하는 것

클래스
  - 객체 지향 프로그래밍 : 객체들 정의하고 그러한 객체 활용해 프로그램 만드는 것 => 프로그래밍 언어에 객체 더 효율적으로 만들 수 있는 문법 추가 = 클래스, 프로토타입
    > 클래스(class) : 객체 만들 때 수많은 지원 하는 대신 많은 제한 검, 대부분의 프로그래밍 언어가 제공하는 문법, 객체 만드는 함수와 비슷 ; class 클래스이름 {}
    > 프로토타임(prototype) : 제한 많이 하지 않지만 대신 지원도 별로 안함 
  - 인스턴스 : 클래스를 기반으로 만든 객체(그냥 객체라 하기도 함) ; new 클래스이름()
  - 생성자 : 클래스 기반으로 인스턴스 생성할 때 처음 호출되는 메소드, 속성 추가 등 객체의 초기화 처리 함
  - 상속 : 어떤 클래스가 가지고 있는 유산을 다른 클래스에게 물려주는 형태로 사용, 유산 주는 클래스 = 부모 클래스, 유산 받는 클래스 = 자식 클래스
     ; class 클래스이름 extends 부모클래스이름 {}

private 속성과 메소드 : 클래스 사용자가 클래스 속성이나 메소드를 의도하지 않은 방향으로 사용하는 것을 막아 클래스의 안정성을 확보하기 위해 나온 문법, 속성과 메소드 이름 앞에 # 붙이면 됨
  // 사용 전 미리 외부에 어떤 속성 private 속성으로 사용한다고 선언해줘야 함
  ; class 클래스이름 {#속성이름; #메소드이름() {}  }

게터와 세터
  - 게터 : 속성 값 확인할 때 사용하는 메소드
  - 세터 : 속성에 값 지정할 때 사용
  - 기본 형태 : 
    class 클래스 이름 {
        get 이름() {return 값}
        set 이름(value) {}
    }

static 속성과 메소드(정적 속성, 정적 메소드)
  - 기본 형태 : 
    class 클래스 이름 {
        static 속성 = 값
        static 메소드() {}
    }
  - 일반적 변수와 함수처럼 사용 가능 ;클래스 이름.속성 ;클래스 이름.메소드()

오버라이드 : 부모가 갖고 있는 함수를 자식에서 다시 선언해 덮어쓰는 것




*/
