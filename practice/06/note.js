// 객체

/*
객체 : '이름과 값으로 구성'된 속성을 가진 자바스크립트의 기본 데이터 타입
  - 중괄호로 생성, 키:값 형태의 자료를 쉼표로 연결해 입력
  - 객체[키], 객체.키 사용해 객체 요소에 접근 가능 // 식별자 아닌 문자열을 키로 사용했을 경우 무조건 대괄호 사용해야 객체의 요소에 접근 가능
  - 객체 내부의 값 = 속성, 속성 중 함수 자료형인 속성 = 메소드  //화살표 함수는 메소드로 사용하지 않음(메소드 내부에서 this 키워드 사용시 의미 달라짐)
  - this 키워드 : 객체 내부의 메소드에서 객체 자신을 나타냄
  - 동적으로 객체 속성 추가 : 객체 생성 후 속성 지정하고 값 입력 ; const 객체 = {}; 객체.키 = 값;
  - 동적으로 객체 속성 제거 : delete 키워드 사용 ; delete 객체.속성
   // 동적 속성 추가, 제거 : 객체 생성 이후에 속성을 추가하거나 제거하는 것
  - 메소드 간단 선언 구문 : 함수명 (매개변수) {}

기본 자료형 : 자바스크립트에서 실체가 있는 것(undefined, null 등이 아닌것) 중 객체가 아닌 것 = 숫자, 문자열, 불
  - 객체가 아니므로 속성 가질 수 없음
  - 기본 자료형 객체로 선언 : const 객체 = new 객체자료형이름()  // ex) new Number(10), new String('안녕'), new Boolean(true)
  - 기본 자료형의 일시적 승급 : 기본 자료형 생성 뒤 뒤에 온점 찍으면 메소드 나옴 => 자바스크립트는 사용 편리성 위해 온점 찍고 속성과 메소드 호출할 때 일시적으로 객테로 승급시킴
    => 일시적인것이므로 실제로는 속성, 메소드를 추가로 가질 수 없음
  - 프로토타입으로 메소드 추가 : prototype이라는 속성이 객체 전용 틀이라고 할 수 있음, prototype 객체에 속성과 메소드 추가하면 모든 객체와 기본 자료형에서 해당 속성과 메소드 사용가능
    ; 객체자료형이름.prototype.메소드이름 = function(){}

Number 객체
  - 기본 메소드
    1) toFixed(N) : 숫자 N번째 자릿수까지 출력하기
    2) isNaN(), isFinite() : 어떤 숫자가 NaN(Not a Number)인지 또는 Infinity(무한)인지 확인할 때, Number 뒤 온점 찍고 사용
      // NaN은 비교 연산자로 비교 불가 / 무한대 값은 비교연산자로 비교 가능 ; a === Infinity || a === -Infinity
    
String 객체
  - 기본 메소드
    1) trim() : 문자열 양쪽 끝 공백 없애기
    2) split() : 문자열을 특정 기호로 자르기

JSON 객체
  - JSON(JavaScript Object Notation) : 자바스크립트의 객체처럼 자료를 표현하는 방식, 인터넷에서 문자열로 데이터 주고받을 때 CSV, XML, CSON 등 다양한 자료 표현 방식 사용할 수 있는데 현재 가장 많이 사용되는 자료 표현 방식
  - JSON 형식 규칙
    > 값을 표현할 때는 문자열, 숫자, 불 자료형만 사용가능(함수형은 사용 불가)
    > 문자열은 반드시 큰따옴표로 만들어야 함
    > 키(key)에도 반드시 따옴표 붙여야 함
  - 기본 메소드
    1) JSON.stringify(매개변수, null, 들여쓰기 칸 수) : 자바스크립트 객체를 JSON 문자열로 변환할 때 사용
        // 2번째 매개변수는 객체에서 어떤 속성만 선택해서 추출하고 싶을 때 사용, 거의 사용하지 않고 일반적으로 null(아무것도 없음) 넣음
    2) JSON.parse() : JSON 문자열을 자바스크립트 객체로 전개할 때

Math 객체 : 수학과 관련된 기본적인 연산을 할 때 사용
  - 객체 속성 : PI,E와 같은 수학 상수
  - 메소드 : Math.sin(), Math.cos(), Math.tan()와 같은 삼각함수 등
  - Math.random() : 랜덤한 숫자 생성(0이상 1미만)

다중 할당
  - 배열 기반 : 한 번에 여러개의 변수에 값을 할당, 배열의 위치에 맞게 값 할당 ; [식별자(변수 또는 상수), 식별자, 식별자, ...] = 배열
  - 객체 기반 : 객체 내부에 있는 속성을 꺼내 변수로 할당할 때 ; {속성 이름, 속성 이름} = 객체 or {식별자=속성 이름, 식별자=속성 이름} = 객체
  
배열 전개 연산자 
  - 얕은 복사(참조 복사) : 배열은 복사해도 다른 이름이 붙을 뿐, 복사 후 자료 추가하면 복사 이전 배열도 같은 값 나옴
  - 깊은 복사(클론(clone) 만드는 것) : 복사한 두 배열이 완전히 독립적으로 작동 ; [...배열]
  - 전개 연산자 사용한 배열 요소 추가 : [...배열, 자료, 자료, 자료]  // 해당 위치에 복사되어 전재되는 것이므로 위치를 원하는 곳에 놓아 요소들의 순서 바꿀 수 있음

객체 전개 연산자
  - 깊은 복사 : {...객체}
  - 전개 연산자 사용한 객체 요소 추가 : {...객체, 자료, 지료, 지료} // 전개한 부분에 객체 펼쳐지므로 전개 순서 중요함(덮어써질 수 있음)

*/

// 참고내용
/*
Lodash 라이브러리
  - 외부 라이브러리 : 다른 사람들이 만든 다양한 함수와 클래스를 묶어서 제공해주는 것
  - 유틸리티 라이브러리 : 개발할 때 보조적으로 사용하는 함수들 제공해주는 라이브러리, underscore, Lodash 등 다양하게 있는데 Lodash가 최근 많이 사용됨
  - sortBy() : 배열을 어떤 것으로 정렬할 지 지정하면, 지정한 것 기반으로 배열 정렬해 리턴해주는 메소드

  
CDN(Contents Delivery Network;콘텐츠 전송 네트워크) : 일반적으로 어떤 사이트는 어떤 특정 지역의 서버에 위치, 다른 나라 데이터 전송받으면 속도 느림
  => 전 세계 여러 지역에 전송할 데이ㅓ를 창고처럼 준비해두고 데이터 요청시 가장 가까운 지역에서 데이터 전송해주면 훨씬 빠름, 가까운 지역에 문제가 있으면 그 다음으로 가까운 지역애서 데이터 전송하면 데이터 받을 수 없는 문제 해결 가능
  => 이런 통신 네트워크를 CDN 이라 함

min 버전 : min 버전 자바스크립트 파일은 자바스크립트 코드를 집핑(zipping; 데이터 용량을 줄이기 위해 코드를 응축하는 것)한 파일을 의미

*/
